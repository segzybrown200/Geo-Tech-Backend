// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(uuid()) @db.Uuid
  fullName           String?
  email              String               @unique
  password           String
  role               Role                 @default(USER)
  applications       Application[]
  createdAt          DateTime             @default(now())
  CofOApplication    CofOApplication[]
  LandRegistration   LandRegistration[]   @relation("UserLands")
  isEmailVerified    Boolean              @default(false)
  PasswordResetToken PasswordResetToken[]
  OwnershipTransfer  OwnershipTransfer[]
}

model Application {
  id          String            @id @default(uuid())
  userId      String            @db.Uuid
  documentUrl String
  type        String
  status      ApplicationStatus @default(PENDING)
  paymentId   String?
  createdAt   DateTime          @default(now())

  user User @relation(fields: [userId], references: [id])
}

enum ApplicationStatus {
  PENDING
  IN_REVIEW
  APPROVED
  REJECTED
}

enum Role {
  USER
  APPROVER
  ADMIN
  GOVERNOR
}

model InternalUser {
  id                String         @id @default(uuid()) @db.Uuid
  name              String
  email             String         @unique
  password          String?
  phone             String?
  ministry          String?
  department        String?
  position          String?
  function          String?
  state             State          @relation(fields: [stateId], references: [id])
  stateId           String         @db.Uuid
  role              Role           @default(APPROVER)
  requiresSignature Boolean        @default(false)
  signatureUrl      String?
  createdAt         DateTime       @default(now())
  StageLog          StageLog[]
  InboxMessage      InboxMessage[]
  StateGovernor     State?         @relation("Governor")
  // Sessions & OTP relations
  sessions          Session[]      @relation("InternalUserSessions")
  emailToken        String? // used for verifying email
  passwordToken     String? // used for setting password after verification
  isVerified        Boolean        @default(false)
  tokenExpiresAt    DateTime? // expiration for tokens
  otps              InternalOtp[]
}

model Session {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  internalUser   InternalUser @relation(fields: [internalUserId], references: [id], name: "InternalUserSessions")
  internalUserId String       @db.Uuid
  refreshToken   String       @unique
  userAgent      String?
  ip             String?
  createdAt      DateTime     @default(now())
  expiresAt      DateTime
  revoked        Boolean      @default(false)
}

model InternalOtp {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  internalUser   InternalUser @relation(fields: [internalUserId], references: [id])
  internalUserId String       @db.Uuid
  code           String
  expiresAt      DateTime
  used           Boolean      @default(false)
  createdAt      DateTime     @default(now())
}

model LandRegistration {
  id                String                   @id @default(uuid()) @db.Uuid
  ownerId           String                   @db.Uuid
  owner             User                     @relation(fields: [ownerId], references: [id], name: "UserLands")
  ownerName         String
  latitude          Float
  longitude         Float
  squareMeters      Float
  ownershipType     String
  stateId           String                   @db.Uuid
  state             State                    @relation(fields: [stateId], references: [id])
  purpose           String
  titleType         String
  documents         LandDocument[]
  ownershipLogs     OwnershipHistory[]
  createdAt         DateTime                 @default(now())
  CofOApplication   CofOApplication[]
  boundary          Unsupported("geometry")?
  OwnershipTransfer OwnershipTransfer[]
}

model LandDocument {
  id          String           @id @default(uuid())
  landId      String           @db.Uuid
  documentUrl String
  fileName    String
  land        LandRegistration @relation(fields: [landId], references: [id])
}

model State {
  id         String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String                   @unique
  lands      LandRegistration[]
  approvers  InternalUser[]
  boundary   Unsupported("geometry")?
  governorId String?                  @unique @db.Uuid
  governor   InternalUser?            @relation("Governor", fields: [governorId], references: [id])
  createdAt  DateTime                 @default(now())
}

model OwnershipTransfer {
  id             String   @id @default(uuid()) @db.Uuid
  landId         String   @db.Uuid
  currentOwnerId String   @db.Uuid
  newOwnerEmail  String
  status         String   @default("PENDING_AUTHORIZATION")
  expiresAt      DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  verifications TransferVerification[]
  land          LandRegistration       @relation(fields: [landId], references: [id])
  currentOwner  User                   @relation(fields: [currentOwnerId], references: [id])
}

model TransferVerification {
  id          String   @id @default(uuid()) @db.Uuid
  transferId  String   @db.Uuid
  channelType String // 'email' or 'phone'
  target      String // the actual email or phone number
  code        String
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  expiresAt   DateTime

  transfer OwnershipTransfer @relation(fields: [transferId], references: [id])
}

model OwnershipHistory {
  id           String   @id @default(uuid()) @db.Uuid
  landId       String   @db.Uuid
  fromUserId   String
  toUserId     String
  authorizedBy String
  transferDate DateTime @default(now())

  land LandRegistration @relation(fields: [landId], references: [id])
}

model CofOApplication {
  id                   String            @id @default(uuid()) @db.Uuid
  userId               String            @db.Uuid
  landId               String            @db.Uuid
  status               ApplicationStatus @default(PENDING)
  documentUrls         String[]
  paymentRef           String?
  paymentStatus        String            @default("PENDING")
  cofONumber           String? // new
  signedAt             DateTime? // new
  logs                 StageLog[]
  createdAt            DateTime          @default(now())
  user                 User              @relation(fields: [userId], references: [id])
  land                 LandRegistration  @relation(fields: [landId], references: [id])
  InboxMessage         InboxMessage[]
  governorSignatureUrl String? // new
}

model StageLog {
  id             String          @id @default(uuid()) @db.Uuid
  cofOId         String          @db.Uuid
  stageNumber    Int
  internalUserId String          @db.Uuid
  status         String
  message        String?
  arrivedAt      DateTime        @default(now())
  approvedAt     DateTime?
  cofO           CofOApplication @relation(fields: [cofOId], references: [id])
  approver       InternalUser    @relation(fields: [internalUserId], references: [id])
}

model InboxMessage {
  id           String          @id @default(uuid())
  receiverId   String          @db.Uuid
  cofOId       String          @db.Uuid
  documentList String[]
  status       String
  timestamp    DateTime        @default(now())
  messageLink  String
  internalUser InternalUser    @relation(fields: [receiverId], references: [id])
  cofO         CofOApplication @relation(fields: [cofOId], references: [id])
}

model EmailVerificationToken {
  id        String   @id @default(uuid()) @db.Uuid
  email     String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  userId    String   @db.Uuid
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}
